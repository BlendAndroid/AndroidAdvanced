apply plugin: 'com.android.library'
//声明添加的插件类型
apply plugin: 'org.greenrobot.greendao'

def cfg = rootProject.ext.android
def dep = rootProject.ext.dependencies

android {
    compileSdkVersion cfg.compileSdkVersion

    defaultConfig {
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

greendao {
    // 指定数据库schema版本号，迁移等操作会用到
    schemaVersion 1
    // 设置生成数据库文件的目录，默认是在build中，可以将生成的文件放到我们的java目录中
    targetGenDir 'src/main/java'
    // 设置生成的数据库相关文件的包名，默认为entity所在的包名
    daoPackage 'com.blend.architecture.database_design.daopackage'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation dep['appcompat-v7']
    implementation dep['design']
    implementation dep['recyclerview']
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    //EventBus
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    //切面编程
    implementation 'org.aspectj:aspectjrt:1.9.2'

    //数据库架构GreenDao
    implementation 'org.greenrobot:greendao:3.3.0'

    //换肤
    implementation project(':skincore')

    //组件化通信(提供了编译关系，与依赖关系不同，对应的库不会被打入到apk中，但是会编译库中的代码生成java文件，过了编译期就不需要了)
    annotationProcessor project(':routercompiler')
    implementation project(':routerbase')
    implementation project(':routermodule1')
    if (isModule) {
        implementation project(':routermodule2')
    }

//    //Glide
//    implementation 'com.github.bumptech.glide:glide:4.11.0'
//    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    //rxjava2
    implementation "io.reactivex.rxjava2:rxjava:2.2.19"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.2'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.2'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.2'



    //插件化
    implementation project(':pluginstand')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

final def log = project.logger
final def variants = project.android.libraryVariants

//在构建工程时，执行编辑
variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.9",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
