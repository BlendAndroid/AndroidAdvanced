package com.blend.algorithm.tree;


/**
 * 红黑树：R-B Tree，全称是Red-Black Tree。红黑树是一种自平衡二叉查找树，红黑树和平衡二叉树(AVL树)都是二叉查找树的变体，但红黑树的统计性能要好于AVL树。
 * 因为，AVL树是严格维持平衡的，红黑树是黑平衡的。维持平衡需要额外的操作，这就加大了数据结构的时间复杂度，所以红黑树可以看作是
 * 二叉搜索树和AVL树的一个折中，维持平衡的同时也不需要花太多时间维护数据结构的性质。
 * 它是复杂的，但它的操作有着良好的最坏情况运行时间，并且在实践中是高效的: 它可以在O(log n)时间内做查找，插入和删除等操作。
 * <p>
 * 红黑树的特性:
 * 1.每个结点是黑色或者红色。
 * 2.根结点是黑色。
 * 3.每个叶子结点（NIL）是黑色。 [注意：这里叶子结点，是指为空(NIL或NULL)的叶子结点！]
 * 4.如果一个结点是红色的，则它的子结点必须是黑色的。
 * 5.每个结点到叶子结点NIL所经过的黑色结点的个数一样的。[确保没有一条路径会比其他路径长出俩倍，所以红黑树是相对接近平衡的二叉树的！]
 * <p>
 * 红黑树在很多地方都有应用，例如：
 * 1.C++的STL，map和set都是用红黑树实现的。
 * 2.著名的linux进程调度Completely Fair Scheduler，用红黑树管理进程控制块。
 * 3.epoll在内核中的实现，用红黑树管理事件块。
 * 4.nginx用红黑树管理timer等。
 * 5.Java的TreeMap实现。
 */
public class RBTree {
}
