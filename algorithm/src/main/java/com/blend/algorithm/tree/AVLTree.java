package com.blend.algorithm.tree;

/**
 * AVL树，也称平衡二叉搜索树(平衡二叉排序树)，AVL是其发明者姓名简写。AVL树属于树的一种，而且它也是一棵二叉搜索树，不同的是
 * 它通过一定机制能保证二叉搜索树的平衡，平衡的二叉搜索树的查询效率更高。
 * <p>
 * 特点：
 * 1.AVL树是一棵二叉搜索树。
 * 2.AVL树的左右子节点也是AVL树。
 * 3.AVL树拥有二叉搜索树的所有基本特点。
 * 4.每个节点的左右子节点的高度之差的绝对值最多为1，即平衡因子为范围为[-1,1]。
 * 平衡因子Balance Factor(bf)：结点的左子树的深度减去右子树的深度，那么显然-1<=bf<=1;
 * <p>
 * 作用：
 * 对于一般的二叉搜索树（Binary Search Tree），其期望高度（即为一棵平衡树时）为log2n，其各操作的时间复杂度（O(log2n)）
 * 同时也由此而决定。但是，在某些极端的情况下（如在插入的序列是有序的时），二叉搜索树将退化成近似链或链，此时，其操作的时间复
 * 杂度将退化成线性的，即O(n)。我们可以通过随机化建立二叉搜索树来尽量的避免这种情况，但是在进行了多次的操作之后，由于在删除时，
 * 我们总是选择将待删除节点的后继代替它本身，这样就会造成总是右边的节点数目减少，以至于树向左偏沉。这同时也会造成树的平衡性受
 * 到破坏，提高它的操作的时间复杂度。
 * <p>
 * AVL的插入和删除：平衡二叉树的失衡调整主要是通过旋转最小失衡子树来实现的。
 * 最小失衡子树：在新插入的结点向上查找，以第一个平衡因子的绝对值超过1的结点为根的子树称为最小不平衡子树。也就是说，一棵失衡的树，
 * 是有可能有多棵子树同时失衡的，如下。而这个时候，我们只要调整最小的不平衡子树，就能够将不平衡的树调整为平衡的树。
 * AVL树的插入：
 * LL插入方式：右单旋
 * RR插入方式：左单旋
 * LR插入方式：左右双旋
 * RL插入方式：右左双旋
 * AVL的删除：
 */
public class AVLTree {


}
